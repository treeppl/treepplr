[{"path":"http://treeppl.org/treepplr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 treepplr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://treeppl.org/treepplr/articles/hostrep-example.html","id":"run-treeppl","dir":"Articles","previous_headings":"","what":"Run treeppl","title":"Host repertoire model example","text":"Run hostrep.tppl TreePPL program using input data available package default inference options. output tp_parse() contains information outputted treeppl, need separate sampled character histories sampled parameter values.","code":"model <- tp_model(\"hostrep3states\") data <- tp_data(\"hostrep3states\") output_json <- tp_treeppl(model = model, model_file_name = \"hostrep\",                            data = data, data_file_name = \"hostrep\") output <- tp_parse(output_json)"},{"path":"http://treeppl.org/treepplr/articles/hostrep-example.html","id":"parameter-estimates","dir":"Articles","previous_headings":"","what":"Parameter estimates","title":"Host repertoire model example","text":"","code":"logs <-  output[[1]] %>%    dplyr::select(iteration, log_weight, mu, beta) %>%    unique() %>%    dplyr::mutate(weight = exp(log_weight - max(.$log_weight)))  ggplot(logs) +   geom_histogram(aes(mu, y = after_stat(density), weight=weight), col = \"white\", fill = \"lightblue\") +   geom_density(aes(mu, weight=weight)) +   theme_bw() #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ggplot(logs) +   geom_histogram(aes(beta, y = after_stat(density), weight=weight), col = \"white\", fill = \"lightblue\") +   geom_density(aes(beta, weight=weight)) +   theme_bw() #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"http://treeppl.org/treepplr/articles/hostrep-example.html","id":"character-history","dir":"Articles","previous_headings":"","what":"Character history","title":"Host repertoire model example","text":"Extract table character history samples table can used evolnets plotting results, together phylogenetic trees known extant interactions.","code":"# post-treatment function get_history <- function(parsed_output){      table <- parsed_output[[1]] %>%      dplyr::select(-c(log_weight, mu, beta, lambda1, lambda2, lambda3, lambda4)) %>%     dplyr::mutate(transition_type = \"anagenetic\") %>%      dplyr::mutate(node_index = dplyr::case_when( # fix to mismatch and 0- to 1-base                                         node_index == 3 ~ 5,                                          node_index == 4 ~ 4,                                         TRUE ~ node_index + 1)) %>%      dplyr::filter(!is.na(log_norm_const))        return(table) } tp_hist <- get_history(output) head(tp_hist) #>   iteration log_norm_const node_index branch_start_time branch_end_time #> 1         0      -37.34668          7                NA        2.000000 #> 2         0      -37.34668          6          2.000000        0.735218 #> 3         0      -37.34668          5          0.735218        0.000000 #> 4         0      -37.34668          3          0.735218        0.000000 #> 5         0      -37.34668          4          2.000000        0.428200 #> 6         0      -37.34668          4          2.000000        0.428200 #>   start_state end_state transition_time parent_index child1_index child2_index #> 1         220       220              NA           NA            5            4 #> 2         220       120       1.6199567            6            3            2 #> 3         120        20       0.2626133            5           NA           NA #> 4         120       220       0.6140343            5           NA           NA #> 5         220       210       1.2031141            6            1            0 #> 6         210       200       0.5926294            6            1            0 #>   transition_type #> 1      anagenetic #> 2      anagenetic #> 3      anagenetic #> 4      anagenetic #> 5      anagenetic #> 6      anagenetic # get data from treepplr symbiont_tree <- evolnets::read_tree_from_revbayes(   system.file(\"extdata/tree_subroot_Rev.tre\", package = \"treepplr\")) host_tree <- treeio::read.tree(   system.file(\"extdata/host_tree.tre\", package = \"treepplr\")) matrix <- read.csv(   system.file(\"extdata/host_matrix.csv\", package = \"treepplr\"),    row.names = 1) %>%    as.matrix() # calculate posterior at nodes tp_at_nodes <- evolnets::posterior_at_nodes(tp_hist, symbiont_tree, host_tree, state = c(1,2))  # plot data and inferred ancestral states # fundamental host repertoire (tp_asr_fund <- evolnets::plot_matrix_phylo(matrix, tp_at_nodes, symbiont_tree,                                              host_tree, type = \"repertoires\",                                              repertoire = \"fundamental\")) # realized host repertoire (tp_asr_real <- evolnets::plot_matrix_phylo(matrix, tp_at_nodes, symbiont_tree,                                              host_tree, type = \"repertoires\",                                              repertoire = \"realized\"))"},{"path":"http://treeppl.org/treepplr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mariana P Braga. Author, maintainer.","code":""},{"path":"http://treeppl.org/treepplr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"P Braga M (2025). treepplr: R Interface TreePPL. R package version 0.9.0, https://github.com/treeppl/treepplr.","code":"@Manual{,   title = {treepplr: R Interface to TreePPL},   author = {Mariana {P Braga}},   year = {2025},   note = {R package version 0.9.0},   url = {https://github.com/treeppl/treepplr}, }"},{"path":"http://treeppl.org/treepplr/index.html","id":"treepplr","dir":"","previous_headings":"","what":"R Interface to TreePPL","title":"R Interface to TreePPL","text":"R Interface TreePPL","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_check_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Check input for inference with TreePPL — tp_check_input","title":"Check input for inference with TreePPL — tp_check_input","text":"function check conformity model/data tp_go().","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_check_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check input for inference with TreePPL — tp_check_input","text":"","code":"tp_check_input(model, data)"},{"path":"http://treeppl.org/treepplr/reference/tp_check_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check input for inference with TreePPL — tp_check_input","text":"model TreePPL model (S3) data phyjson object (S3)","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_check_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check input for inference with TreePPL — tp_check_input","text":"...","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_compile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile for tp_run() — tp_compile","title":"Compile for tp_run() — tp_compile","text":"tp_compile compile TreePPL model use tp_run.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_compile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile for tp_run() — tp_compile","text":"","code":"tp_compile(   model_file_name = \"tmp_model_file\",   seed = NULL,   method = \"smc-bpf\",   align = FALSE,   cps = \"none\",   delay = NULL,   kernel = NULL,   mcmc_lw_gprob = NULL,   pmcmc_particles = NULL,   prune = FALSE,   subsample = NULL,   resample = NULL )"},{"path":"http://treeppl.org/treepplr/reference/tp_compile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile for tp_run() — tp_compile","text":"model_file_name character vector giving model name. seed base::numeric use random seed. method character vector giving inference method name. align base::logical tell need align model. cps character vector giving configuration CPS transformation. delay character vector giving configuration delayed sampling. kernel base::numeric value giving driftScale driftKernel MCMC. mcmc_lw_gprob base::numeric probability performing global MCMC step. pmcmc_particles base::integer number particles smc proposal computation prune base::logical tell model try pruned. subsample base::integer number draw subsample posterior distribution. resample character vector giving selected resample placement method.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_compile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile for tp_run() — tp_compile","text":"R's base::tempdir() whreŕe compile file stored.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_compile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compile for tp_run() — tp_compile","text":"model_file_name : character vector giving tp_treeppl model name.  Use tp_data_stored name already write model tp_treeppl. seed : random seed use. Using 'NULL' initialized randomly. method : Inference method used. selected inference method. supported methods : -lw, smc-bpf, smc-apf, mcmc-lightweight, mcmc-trace, mcmc-naive, pmcmc-pimh. following options highly dependable method used. Check [implemented yet] information. align : Whether align model certain inference algorithms. cps : Configuration CPS transformation (applicable certain inference algorithms). supported options : none, partial, full. delay : model transformed efficient representation possible. supported options : static dynamic. Use 'NULL' ignore. kernel : value driftScale driftKernel MCMC. Use 'NULL' ignore. Use conjuction method mcmc-lightweight\". Use 'NULL' ignore mcmc_lw_gprob : probability performing global MH step (non-global means modify single sample previous trace). Use conjuction method mcmc-lightweight\". Use 'NULL' ignore pmcmc_particles : number particles smc proposal computation. option used one following methods used: pmcmc-*. Use 'NULL' ignore prune : model pruned possible. subsample : number draw subsample posterior distribution. Use conjuction method smc-apf smc-bpf. Use 'NULL' ignore. resample: selected resample placement method, inference algorithms applicable. supported methods : likelihood (resample immediately likelihood updates), align (resample aligned likelihood updates, forces –align), manual (sample manually defined resampling locations). Use 'NULL' ignore.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_compile_stored.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide model filenames compiled by user in base::tempdir()) using tp_write()) — tp_compile_stored","title":"Provide model filenames compiled by user in base::tempdir()) using tp_write()) — tp_compile_stored","text":"Provide list compiled model filenames currently stored base::tempdir()).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_compile_stored.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide model filenames compiled by user in base::tempdir()) using tp_write()) — tp_compile_stored","text":"","code":"tp_compile_stored()"},{"path":"http://treeppl.org/treepplr/reference/tp_compile_stored.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide model filenames compiled by user in base::tempdir()) using tp_write()) — tp_compile_stored","text":"list compiled model filenames.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data for TreePPL program — tp_data","title":"Import data for TreePPL program — tp_data","text":"tp_data takes TreePPL program data data use tp_treeppl().","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data for TreePPL program — tp_data","text":"","code":"tp_data(data_input)"},{"path":"http://treeppl.org/treepplr/reference/tp_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data for TreePPL program — tp_data","text":"data_input polymorphic parameter (see ).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data for TreePPL program — tp_data","text":"phyjson data (S3), see tp_phyjson() details.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import data for TreePPL program — tp_data","text":"function takes TreePPL program data import . data_input : full path data file contains TreePPL program data data_input : model name one model supported treepplr package (see tp_model_name() exemple data supported) data_input : list (strucutred list) containing TreePPL program data.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_data_stored.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide data filenames stored by user in base::tempdir()) using tp_write()) — tp_data_stored","title":"Provide data filenames stored by user in base::tempdir()) using tp_write()) — tp_data_stored","text":"Provide list data filenames currently stored base::tempdir()). can also use verify model attach data (see tp_model_stored())","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_data_stored.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide data filenames stored by user in base::tempdir()) using tp_write()) — tp_data_stored","text":"","code":"tp_data_stored()"},{"path":"http://treeppl.org/treepplr/reference/tp_data_stored.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide data filenames stored by user in base::tempdir()) using tp_write()) — tp_data_stored","text":"list data filenames.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Import model for TreePPL program — tp_model","title":"Import model for TreePPL program — tp_model","text":"tp_model takes TreePPL programm code model becheck tp_treeppl().","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import model for TreePPL program — tp_model","text":"","code":"tp_model(model_input)"},{"path":"http://treeppl.org/treepplr/reference/tp_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import model for TreePPL program — tp_model","text":"model_input polymorphic parameter (see ).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import model for TreePPL program — tp_model","text":"TreePPL model (S3). structured list 1 string representation TreePPL model class object = (tp_model_name() \"custom\")","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import model for TreePPL program — tp_model","text":"function takes TreePPL programm code import . model_input : full path model file contains TreePPL programm code model_input : model name one model supported treepplr package (see tp_model_name() model supported) model_input : full string containing TreePPL programm code.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_model_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide normalized model names supported by treepplr — tp_model_name","title":"Provide normalized model names supported by treepplr — tp_model_name","text":"Provide list model names supported treepplr. can also use find data attach models (see tp_data())","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_model_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide normalized model names supported by treepplr — tp_model_name","text":"","code":"tp_model_name()"},{"path":"http://treeppl.org/treepplr/reference/tp_model_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide normalized model names supported by treepplr — tp_model_name","text":"list model names.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_model_stored.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide model filenames stored by user in base::tempdir()) using tp_write()) — tp_model_stored","title":"Provide model filenames stored by user in base::tempdir()) using tp_write()) — tp_model_stored","text":"Provide list model filenames currently stored base::tempdir()). can also use verify data attach models (see tp_data_stored())","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_model_stored.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide model filenames stored by user in base::tempdir()) using tp_write()) — tp_model_stored","text":"","code":"tp_model_stored()"},{"path":"http://treeppl.org/treepplr/reference/tp_model_stored.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide model filenames stored by user in base::tempdir()) using tp_write()) — tp_model_stored","text":"list model filenames.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse TreePPL json output — tp_parse","title":"Parse TreePPL json output — tp_parse","text":"tp_parse take TreePPL json output return data.frame","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse TreePPL json output — tp_parse","text":"","code":"tp_parse(treeppl_out, n_runs = 1)"},{"path":"http://treeppl.org/treepplr/reference/tp_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse TreePPL json output — tp_parse","text":"treeppl_out character vector giving TreePPL json output. n_runs base::integer giving number run (mcmc)/sweap (smc).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse TreePPL json output — tp_parse","text":"List (n=n_runs) RevBayes dataframe format.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse TreePPL json output — tp_parse","text":"function takes TreePPL json output write revBeyes data.fram format. treeppl_out : TreePPL json output coming tp_treeppl. n_runs : number run (mcmc) / sweap (smc) used inference.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse_coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse TreePPL json coin output — tp_parse_coin","title":"Parse TreePPL json coin output — tp_parse_coin","text":"tp_parse_coin take TreePPL json output return data.frame","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse_coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse TreePPL json coin output — tp_parse_coin","text":"","code":"tp_parse_coin(treeppl_out, n_runs = 1)"},{"path":"http://treeppl.org/treepplr/reference/tp_parse_coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse TreePPL json coin output — tp_parse_coin","text":"treeppl_out character vector giving TreePPL json output. n_runs base::integer giving number run (mcmc)/sweap (smc).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse_coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse TreePPL json coin output — tp_parse_coin","text":"List (n=n_runs) RevBayes dataframe format.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_parse_coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse TreePPL json coin output — tp_parse_coin","text":"function takes TreePPL json output write revBeyes data.fram format. treeppl_out : TreePPL json output coming tp_treeppl. n_runs : number run (mcmc) / sweap (smc) used inference.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_phyjson.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a phyjson object — tp_phyjson","title":"Create a phyjson object — tp_phyjson","text":"tp_phyjson takes variable number argument return phyjson object.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_phyjson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a phyjson object — tp_phyjson","text":"","code":"tp_phyjson(...)"},{"path":"http://treeppl.org/treepplr/reference/tp_phyjson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a phyjson object — tp_phyjson","text":"... Variadic arguments (see details).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_phyjson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a phyjson object — tp_phyjson","text":"phyjson object (S3).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_phyjson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a phyjson object — tp_phyjson","text":"function takes variable number argument, users can pass arguments either independent lists parameter single structured list list. use like list (name_arg = value_arg, etc).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_phyjson_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a phyjson object to phyjson list — tp_phyjson_list","title":"Convert a phyjson object to phyjson list — tp_phyjson_list","text":"tp_phyjson takes object class \"phyjson\" return phyjson list ready export JSON","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_phyjson_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a phyjson object to phyjson list — tp_phyjson_list","text":"","code":"tp_phyjson_list(phyjson)"},{"path":"http://treeppl.org/treepplr/reference/tp_phyjson_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a phyjson object to phyjson list — tp_phyjson_list","text":"phyjson object class \"phyjson\".","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_phyjson_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a phyjson object to phyjson list — tp_phyjson_list","text":"structured list contain phyjson","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_phylo_2_phyjson.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a from a phylo object — tp_phylo_2_phyjson","title":"Create a from a phylo object — tp_phylo_2_phyjson","text":"tp_phylo_2_phyjson takes object class \"phylo\" return phyjson object.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_phylo_2_phyjson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a from a phylo object — tp_phylo_2_phyjson","text":"","code":"tp_phylo_2_phyjson(phylo_tree)"},{"path":"http://treeppl.org/treepplr/reference/tp_phylo_2_phyjson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a from a phylo object — tp_phylo_2_phyjson","text":"phylo_tree object class ape::phylo.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_phylo_2_phyjson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a from a phylo object — tp_phylo_2_phyjson","text":"phyjson object (S3)","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a TreePPL program — tp_run","title":"Run a TreePPL program — tp_run","text":"tp_treeppl execute TreePPL return TreePPL output (string JSON format).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a TreePPL program — tp_run","text":"","code":"tp_run(   model_file_name = \"tmp_model_file\",   data_file_name = \"tmp_data_file\",   samples = 1000,   n_runs = \"1\" )"},{"path":"http://treeppl.org/treepplr/reference/tp_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a TreePPL program — tp_run","text":"model_file_name character vector giving model name. data_file_name character vector giving data name. samples base::integer giving number samples (mcmc) particules (smc). n_runs base::integer giving number run (mcmc)/sweap (smc).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a TreePPL program — tp_run","text":"TreePPL output JSON format.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_run.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a TreePPL program — tp_run","text":"#' model_file_name : character vector giving tp_treeppl model name.  Use tp_data_stored name already write model tp_treeppl. data_file_name : character vector giving tp_treeppl data name. Use tp_data_stored name already write data tp_treeppl. samples : number samples (mcmc) / particules (smc) inference. n_runs : number run (mcmc) / sweap (smc) used inference.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_tempdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide normalized names and make return an tmp_dir. — tp_tempdir","title":"Provide normalized names and make return an tmp_dir. — tp_tempdir","text":"tp_tempdir provides temporary directory executables can read write temporaty files. path returned normalized format system-dependent terminal separator.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_tempdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide normalized names and make return an tmp_dir. — tp_tempdir","text":"","code":"tp_tempdir(temp_dir = NULL, sep = NULL, sub = NULL)"},{"path":"http://treeppl.org/treepplr/reference/tp_tempdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide normalized names and make return an tmp_dir. — tp_tempdir","text":"temp_dir NULL, path used; NULL, R's base::tempdir() used. sep Better ignored; non-default values passed base::normalizePath(). sub Extension defining sub-directory within directory defined base::tempdir.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_tempdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide normalized names and make return an tmp_dir. — tp_tempdir","text":"Normalized path system-dependent terminal separator.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_treeppl.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile and run a TreePPL program — tp_treeppl","title":"Compile and run a TreePPL program — tp_treeppl","text":"tp_treeppl execute TreePPL return TreePPL output (string JSON format).","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_treeppl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile and run a TreePPL program — tp_treeppl","text":"","code":"tp_treeppl(   model = NULL,   model_file_name = \"tmp_model_file\",   data = NULL,   data_file_name = \"tmp_data_file\",   compile_model = TRUE,   samples = 1000,   seed = NULL,   n_runs = 1,   method = \"smc-bpf\",   align = FALSE,   cps = \"none\",   delay = NULL,   kernel = NULL,   mcmc_lw_gprob = NULL,   pmcmc_particles = NULL,   prune = FALSE,   subsample = NULL,   resample = NULL )"},{"path":"http://treeppl.org/treepplr/reference/tp_treeppl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile and run a TreePPL program — tp_treeppl","text":"model TreePPL model (S3). model_file_name character vector giving model name. data phyjson object (S3). data_file_name character vector giving data name. compile_model base::logical tell model need compile samples base::integer giving number samples (mcmc) particules (smc). seed base::numeric use random seed. n_runs base::integer giving number run (mcmc)/sweap (smc). method character vector giving inference method name. align base::logical tell need align model. cps character vector giving configuration CPS transformation. delay character vector giving configuration delayed sampling. kernel base::numeric value giving driftScale driftKernel MCMC. mcmc_lw_gprob base::numeric probability performing global MCMC step. pmcmc_particles base::integer number particles smc proposal computation prune base::logical tell model try pruned. subsample base::integer number draw subsample posterior distribution. resample character vector giving selected resample placement method","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_treeppl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile and run a TreePPL program — tp_treeppl","text":"TreePPL output JSON format.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_treeppl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compile and run a TreePPL program — tp_treeppl","text":"function takes TreePPL object (S3) phyjson object (S3), compile TreePPL model, run data returning TreePPL output. TreePPL need install computer PATH set R/RSTUDIO (see install manual). executable output files written R's base::tempdir(). model : TreePPL model (S3), see tp_model details. Use 'NULL' previously provide model. Check already provide model tp_model_stored. model_file_name : character vector giving tp_treeppl model name.  Use tp_data_stored name already write model tp_treeppl. data : phyjson object (S3), see tp_phyjson() details. Use 'NULL' previously provide data. Check already provide data tp_data_stored. data_file_name : character vector giving tp_treeppl data name. Use tp_data_stored name already write data tp_treeppl. compile_model : base::logical telling model need compiled. Can use avoid compile model R's base::tempdir() already compile model previous call tp_treeppl. Check already compile model tp_compile_stored. samples : number samples (mcmc) / particules (smc) inference. seed : random seed use. Using 'NULL' initialized randomly. n_runs : number run (mcmc) / sweap (smc) used inference. method : Inference method used. selected inference method. supported methods : -lw, smc-bpf, smc-apf, mcmc-lightweight, mcmc-trace, mcmc-naive, pmcmc-pimh. following options highly dependable method used. Check [implemented yet] information. align : Whether align model certain inference algorithms. cps : Configuration CPS transformation (applicable certain inference algorithms). supported options : none, partial, full. delay : model transformed efficient representation possible. supported options : static dynamic. Use 'NULL' ignore. kernel : value driftScale driftKernel MCMC. Use 'NULL' ignore. Use conjuction method mcmc-lightweight\". Use 'NULL' ignore mcmc_lw_gprob : probability performing global MH step (non-global means modify single sample previous trace). Use conjuction method mcmc-lightweight\". Use 'NULL' ignore pmcmc_particles : number particles smc proposal computation. option used one following methods used: pmcmc-*. Use 'NULL' ignore prune : model pruned possible. subsample : number draw subsample posterior distribution. Use conjuction method smc-apf smc-bpf. Use 'NULL' ignore. resample: selected resample placement method, inference algorithms applicable. supported methods : likelihood (resample immediately likelihood updates), align (resample aligned likelihood updates, forces –align), manual (sample manually defined resampling locations). Use 'NULL' ignore.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare input for tp_compile() — tp_write","title":"Prepare input for tp_compile() — tp_write","text":"tp_write writes JSON file used tp_compile().","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare input for tp_compile() — tp_write","text":"","code":"tp_write(   model = NULL,   model_file_name = \"tmp_model_file\",   data = NULL,   data_file_name = \"tmp_data_file\" )"},{"path":"http://treeppl.org/treepplr/reference/tp_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare input for tp_compile() — tp_write","text":"model TreePPL model (S3). model_file_name character vector giving model name. data phyjson object (S3). data_file_name character vector giving data name.","code":""},{"path":"http://treeppl.org/treepplr/reference/tp_write.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare input for tp_compile() — tp_write","text":"function takes TreePPL object (S3) phyjson object (S3) write base::tempdir(). model : TreePPL model (S3), see tp_model details. Use 'NULL' previously provide model. Check already provide model tp_model_stored. model_file_name : character vector giving tp_treeppl model name.  Use tp_data_stored name already write model tp_write. data : phyjson object (S3), see tp_phyjson() details. Use 'NULL' previously provide data. Check already provide data tp_data_stored. data_file_name : character vector giving tp_treeppl data name. Use tp_data_stored name already write data tp_write.","code":""}]
